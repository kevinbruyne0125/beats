#!/usr/bin/env ruby

require File.dirname(__FILE__) + "/../lib/song"
require File.dirname(__FILE__) + "/../lib/kit"
require File.dirname(__FILE__) + "/../lib/pattern"
require File.dirname(__FILE__) + "/../lib/track"
require "rubygems"
require "optparse"
require "yaml"
require "wavefile"

VERSION = "1.0.0-beta"
SAMPLE_RATE = 44100

def parse_options
  options = {:split => false, :pattern => ""}

  optparse = OptionParser.new do |opts|
    opts.on('-s', '--split', "Save each track to an individual wave file") do
      options[:split] = true
    end

    opts.on('-p', '--pattern PATTERN_NAME', "Output a single pattern instead of the whole song" ) do |p|
      options[:pattern] = p
    end
    
    opts.on('-v', '--version', "Display version number and exit") do
      puts "BEATS v#{VERSION}"
      exit
    end
    
    opts.on( '-h', '--help', "Display this screen and exit" ) do
      puts opts
      exit
    end
  end
  optparse.parse!
  
  return options
end

def save_wave_file(file_name, num_channels, bits_per_sample, sample_data)
  output = WaveFile.new(num_channels, SAMPLE_RATE, bits_per_sample)
  output.sample_data = sample_data
  output.save(file_name)
  return output.duration
end

start = Time.now

options = parse_options
input_file = ARGV[0]
output_file = ARGV[1]

if(input_file == nil)
  ARGV[0] = '-h'
  parse_options()
end

if(output_file == nil)
  output_file = File.basename(input_file, File.extname(input_file)) + ".wav"
end

begin
  parse_start_time = Time.now
  song_from_file = Song.new(File.dirname(input_file), YAML.load_file(input_file))
  
  generate_samples_start = Time.now
  sample_data = song_from_file.sample_data(options[:pattern], options[:split])
  #puts "Time to generate sample data: #{Time.now - generate_samples_start}"

  wave_write_start = Time.now
  if(options[:split])
    duration = nil
    sample_data.keys.each {|track_name|
      extension = File.extname(output_file)
      file_name = File.basename(output_file, extension) + "-" + File.basename(track_name.to_s, extension) + extension
      
      duration = save_wave_file(file_name,
                                song_from_file.num_channels,
                                song_from_file.bits_per_sample,
                                sample_data[track_name])
    }
  else
    duration = save_wave_file(output_file, song_from_file.num_channels, song_from_file.bits_per_sample, sample_data)
  end
  
  puts "#{duration[:minutes]}:#{duration[:seconds].to_s.rjust(2, '0')} of audio produced in #{Time.now - start} seconds."
rescue Errno::ENOENT => detail
  puts ""
  puts "Song file '#{input_file}' not found."
  puts ""
rescue ArgumentError => detail
  puts ""
  puts "Song file '#{input_file}' has an error:"
  puts "  Syntax error in YAML file:"
  puts "  #{detail}"
  puts ""
rescue SongParseError => detail
  puts ""
  puts "Song file '#{input_file}' has an error:"
  puts "  #{detail}"
  puts ""
rescue StandardError => detail
  puts ""
  puts "An error occured while generating sound for '#{input_file}':"
  puts "  #{detail}"
  puts ""
end
